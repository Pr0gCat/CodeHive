generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model ProjectIndex {
  id              String   @id
  name            String
  description     String?
  localPath       String   @unique
  gitUrl          String?
  status          String   @default("ACTIVE")
  framework       String?
  language        String?
  packageManager  String?
  testFramework   String?
  lintTool        String?
  buildTool       String?
  projectType     String   @default("PORTABLE")
  importSource    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastAccessedAt  DateTime @default(now())
  epicCount       Int      @default(0)
  storyCount      Int      @default(0)
  tokenUsage      Int      @default(0)
  isHealthy       Boolean  @default(true)
  lastHealthCheck DateTime @default(now())

  @@map("project_index")
}

model GlobalSettings {
  id                 String   @id @default("global")
  dailyTokenLimit    Int      @default(100000000)
  warningThreshold   Float    @default(0.75)
  criticalThreshold  Float    @default(0.90)
  allocationStrategy Float    @default(0.5)
  autoResumeEnabled  Boolean  @default(true)
  pauseOnWarning     Boolean  @default(false)
  claudeCodePath     String   @default("claude")
  rateLimitPerMinute Int      @default(50)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("global_settings")
}

model TokenUsage {
  id           String   @id @default(cuid())
  projectId    String?
  agentType    String
  taskId       String?
  inputTokens  Int
  outputTokens Int
  timestamp    DateTime @default(now())

  @@map("token_usage")
}

model ProjectBudget {
  id                  String   @id @default(cuid())
  projectId           String   @unique
  allocatedPercentage Float    @default(0)
  dailyTokenBudget    Int      @default(0)
  usedTokens          Int      @default(0)
  lastResetAt         DateTime @default(now())
  warningNotified     Boolean  @default(false)
  criticalNotified    Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("project_budgets")
}

model TaskExecution {
  id            String      @id @default(cuid())
  taskId        String      @unique
  type          String
  status        String      @default("PENDING")
  progress      Float       @default(0)
  currentPhase  String?
  totalPhases   Int         @default(1)
  projectId     String?
  projectName   String?
  initiatedBy   String?
  startedAt     DateTime?
  lastUpdatedAt DateTime    @default(now())
  completedAt   DateTime?
  result        String?
  error         String?
  createdAt     DateTime    @default(now())
  events        TaskEvent[]
  phases        TaskPhase[]

  @@map("task_executions")
}

model TaskPhase {
  id          String        @id @default(cuid())
  taskId      String
  phaseId     String
  title       String
  description String
  status      String        @default("PENDING")
  progress    Float         @default(0)
  order       Int
  startedAt   DateTime?
  completedAt DateTime?
  duration    Int?
  details     String?
  metrics     String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  events      TaskEvent[]
  task        TaskExecution @relation(fields: [taskId], references: [taskId], onDelete: Cascade)

  @@unique([taskId, phaseId])
  @@map("task_phases")
}

model TaskEvent {
  id        String        @id @default(cuid())
  taskId    String
  phaseId   String?
  type      String
  message   String
  details   String?
  progress  Float?
  timestamp DateTime      @default(now())
  phase     TaskPhase?    @relation(fields: [taskId, phaseId], references: [taskId, phaseId], onDelete: Cascade)
  task      TaskExecution @relation(fields: [taskId], references: [taskId], onDelete: Cascade)

  @@map("task_events")
}
