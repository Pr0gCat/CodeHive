// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./prisma/codehive.db"
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  summary     String?  // AI-generated project summary from review
  gitUrl      String?
  localPath   String   @unique
  status      String @default("ACTIVE")
  
  // Tech Stack Configuration
  framework   String?  // e.g., "Next.js", "React", "Vue.js", "Angular"
  language    String?  // e.g., "typescript", "javascript", "python"
  packageManager String? // e.g., "npm", "yarn", "pnpm", "bun"
  testFramework String? // e.g., "jest", "vitest", "cypress"
  lintTool    String?  // e.g., "eslint", "tslint", "pylint"
  buildTool   String?  // e.g., "webpack", "vite", "rollup"
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  kanbanCards KanbanCard[]
  tokenUsage  TokenUsage[]
  queuedTasks QueuedTask[]
  milestones  RoadmapMilestone[]
  agentSpecs  AgentSpecification[]
  settings    ProjectSettings?
  budget      ProjectBudget?
  cycles      Cycle[]
  queries     Query[]
  epics       Epic[]
  mvpPhases   MVPPhase[]
  taskExecutions TaskExecution[]
  logs        ProjectLog[]

  @@map("projects")
}

model GlobalSettings {
  id          String   @id @default("global")
  
  // Token Limit Settings (managed by sliders)
  dailyTokenLimit      Int      @default(100000000) // 100M tokens default
  warningThreshold     Float    @default(0.75)      // 75% warning threshold
  criticalThreshold    Float    @default(0.90)      // 90% critical threshold
  
  // Budget Allocation Strategy (0.0 = equal, 1.0 = usage-based)
  allocationStrategy   Float    @default(0.5)        // 50% mix
  
  // Auto-management Settings
  autoResumeEnabled    Boolean  @default(true)       // Auto-resume when limits reset
  pauseOnWarning       Boolean  @default(false)      // Pause at warning threshold
  
  // Claude API Configuration
  claudeCodePath       String   @default("claude")   // Path to claude command
  rateLimitPerMinute   Int      @default(50)         // API calls per minute
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("global_settings")
}

model ProjectBudget {
  id        String   @id @default(cuid())
  projectId String   @unique
  
  // Budget Allocation (percentage of global daily limit)
  allocatedPercentage Float    @default(0.0)         // 0.0-1.0
  dailyTokenBudget   Int      @default(0)           // Calculated tokens
  usedTokens         Int      @default(0)           // Used today
  
  // Budget tracking
  lastResetAt        DateTime @default(now())
  warningNotified    Boolean  @default(false)
  criticalNotified   Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_budgets")
}

model ProjectSettings {
  id          String   @id @default(cuid())
  projectId   String   @unique
  
  // Token and Rate Limiting Settings
  maxTokensPerDay        Int      @default(10000)
  maxTokensPerRequest    Int      @default(4000)
  maxRequestsPerMinute   Int      @default(20)
  maxRequestsPerHour     Int      @default(100)
  
  // Agent Execution Settings
  agentTimeout           Int      @default(300000)  // 5 minutes in milliseconds
  maxRetries             Int      @default(3)
  parallelAgentLimit     Int      @default(2)
  autoReviewOnImport     Boolean  @default(true)
  
  // Task Queue Settings
  maxQueueSize           Int      @default(50)
  taskPriority           String   @default("NORMAL") // LOW, NORMAL, HIGH, CRITICAL
  autoExecuteTasks       Boolean  @default(true)
  
  // Notification Settings
  emailNotifications     Boolean  @default(false)
  slackWebhookUrl        String?
  discordWebhookUrl      String?
  notifyOnTaskComplete   Boolean  @default(true)
  notifyOnTaskFail       Boolean  @default(true)
  
  // Agent Behavior Settings
  codeAnalysisDepth      String   @default("STANDARD") // LIGHT, STANDARD, DEEP
  testCoverageThreshold  Float    @default(80.0)
  enforceTypeChecking    Boolean  @default(true)
  autoFixLintErrors      Boolean  @default(false)
  
  // Advanced Settings
  claudeModel            String   @default("claude-3-5-sonnet-20241022")
  customInstructions     String?
  excludePatterns        String?  // JSON array of file patterns to exclude
  includeDependencies    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_settings")
}

model KanbanCard {
  id          String     @id @default(cuid())
  projectId   String
  epicId      String?    // Optional: which epic this story belongs to
  title       String
  description String?
  status      String @default("BACKLOG")
  position    Int
  assignedAgent String?
  targetBranch String?   // Target Git branch for this card
  
  // Story details
  storyPoints Int?       // Estimation in story points
  priority    String     @default("MEDIUM") // LOW, MEDIUM, HIGH
  sequence    Int        @default(0) // Order within epic
  tddEnabled  Boolean    @default(false) // Whether to use TDD for this story
  
  // Acceptance criteria
  acceptanceCriteria String? // JSON array of criteria
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  epic        Epic?        @relation(fields: [epicId], references: [id], onDelete: SetNull)
  agentTasks  AgentTask[]
  queuedTasks QueuedTask[]
  cycles      Cycle[]      // TDD cycles for this story
  dependencies StoryDependency[] @relation("StoryDependencies")
  dependents   StoryDependency[] @relation("StoryDependents")

  @@map("kanban_cards")
}

model StoryDependency {
  id          String     @id @default(cuid())
  storyId     String     // Story that depends on another
  dependsOnId String     // Story that this story depends on
  type        String     @default("BLOCKS") // BLOCKS, RELATES_TO
  description String?    // Why this dependency exists
  
  createdAt   DateTime   @default(now())

  // Relations
  story       KanbanCard @relation("StoryDependencies", fields: [storyId], references: [id], onDelete: Cascade)
  dependsOn   KanbanCard @relation("StoryDependents", fields: [dependsOnId], references: [id], onDelete: Cascade)

  @@unique([storyId, dependsOnId])
  @@map("story_dependencies")
}

model AgentTask {
  id          String    @id @default(cuid())
  cardId      String
  agentType   String
  command     String
  status      String @default("PENDING")
  output      String?
  error       String?
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())

  // Relations
  card        KanbanCard @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@map("agent_tasks")
}

model TokenUsage {
  id           String   @id @default(cuid())
  projectId    String
  agentType    String
  taskId       String?
  inputTokens  Int
  outputTokens Int
  timestamp    DateTime @default(now())

  // Relations
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("token_usage")
}

model RoadmapMilestone {
  id          String          @id @default(cuid())
  projectId   String
  title       String
  description String?
  dueDate     DateTime?
  status      String @default("PLANNED")
  createdAt   DateTime        @default(now())

  // Relations
  project     Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("roadmap_milestones")
}

// Real-time task tracking for actual progress monitoring
model TaskExecution {
  id            String    @id @default(cuid())
  taskId        String    @unique // Unique identifier for the task
  type          String    // "PROJECT_IMPORT", "PROJECT_CREATE", "ANALYSIS", etc.
  status        String    @default("PENDING") // PENDING, RUNNING, COMPLETED, FAILED
  progress      Float     @default(0) // 0-100 actual progress percentage
  currentPhase  String?   // Current phase ID
  totalPhases   Int       @default(1)
  
  // Metadata
  projectId     String?
  projectName   String?
  initiatedBy   String?   // User or system identifier
  
  // Timing
  startedAt     DateTime?
  lastUpdatedAt DateTime  @default(now())
  completedAt   DateTime?
  
  // Result data
  result        String?   // Success result data (JSON string)
  error         String?   // Error message if failed
  
  createdAt     DateTime  @default(now())

  // Relations
  project       Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  phases        TaskPhase[]
  events        TaskEvent[]

  @@map("task_executions")
}

// Individual phases of a task with real progress tracking
model TaskPhase {
  id            String    @id @default(cuid())
  taskId        String
  phaseId       String    // "validation", "git_clone", "analysis", etc.
  title         String
  description   String
  status        String    @default("PENDING") // PENDING, ACTIVE, COMPLETED, FAILED, SKIPPED
  progress      Float     @default(0) // 0-100 actual progress
  order         Int       // Execution order
  
  // Timing
  startedAt     DateTime?
  completedAt   DateTime?
  duration      Int?      // Milliseconds
  
  // Details
  details       String?   // Current step details, file counts, etc. (JSON string)
  metrics       String?   // Performance metrics, file sizes, etc. (JSON string)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  task          TaskExecution @relation(fields: [taskId], references: [taskId], onDelete: Cascade)
  events        TaskEvent[]

  @@unique([taskId, phaseId])
  @@map("task_phases")
}

// Granular events for detailed progress tracking
model TaskEvent {
  id          String    @id @default(cuid())
  taskId      String
  phaseId     String?
  type        String    // "PHASE_START", "PHASE_PROGRESS", "PHASE_COMPLETE", "FILE_PROCESSED", "ERROR", etc.
  message     String
  details     String?   // Structured event data (JSON string)
  progress    Float?    // Progress at time of event
  timestamp   DateTime  @default(now())

  // Relations
  task        TaskExecution @relation(fields: [taskId], references: [taskId], onDelete: Cascade)
  phase       TaskPhase? @relation(fields: [taskId, phaseId], references: [taskId, phaseId], onDelete: Cascade)

  @@map("task_events")
}

model QueuedTask {
  id          String      @id @default(cuid())
  projectId   String
  cardId      String?
  taskId      String
  agentType   String
  payload     String      // JSON payload
  priority    Int         @default(0)
  status      String  @default("PENDING")
  createdAt   DateTime    @default(now())
  pausedAt    DateTime?
  resumedAt   DateTime?
  completedAt DateTime?
  error       String?

  // Relations
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  card        KanbanCard? @relation(fields: [cardId], references: [id], onDelete: SetNull)

  @@map("queued_tasks")
}

model AgentSpecification {
  id           String   @id @default(cuid())
  projectId    String
  name         String
  type         String
  purpose      String
  capabilities String   // JSON array
  dependencies String   // JSON array
  prompt       String
  constraints  String   // JSON object
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String   @default("project-manager-agent")

  // Relations
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  performance  AgentPerformance[]
  evolution    AgentEvolution[]

  @@unique([projectId, name], name: "projectId_name")
  @@map("agent_specifications")
}

model AgentPerformance {
  id             String    @id @default(cuid())
  agentId        String
  executionTime  Int
  tokensUsed     Int
  success        Boolean
  errorMessage   String?
  taskComplexity String?
  timestamp      DateTime  @default(now())

  // Relations
  agent          AgentSpecification @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@map("agent_performance")
}

model AgentEvolution {
  id                String   @id @default(cuid())
  agentId           String
  version           Int
  changes           String   // JSON object
  performanceBefore String   // JSON object
  performanceAfter  String?  // JSON object
  reason            String
  timestamp         DateTime @default(now())

  // Relations
  agent             AgentSpecification @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@map("agent_evolution")
}

model UsageTracking {
  id          String   @id @default(cuid())
  timestamp   DateTime @default(now())
  tokenCount  Int
  requestCount Int     @default(1)
  projectId   String?
  agentType   String?
  resetPeriod String   // 'minute', 'hour', 'day'

  @@map("usage_tracking")
}

model UsageLimit {
  id          String   @id @default(cuid())
  limitType   String   @unique // 'tokens_per_day', 'requests_per_minute', etc.
  limitValue  Int
  currentUsage Int     @default(0)
  resetAt     DateTime
  updatedAt   DateTime @updatedAt

  @@map("usage_limits")
}

// Epic-Kanban-TDD Integration Models
model Epic {
  id          String   @id @default(cuid())
  projectId   String
  title       String   // "電商購物車系統"
  description String?  // Optional detailed description
  type        String   @default("FEATURE") // MVP, ENHANCEMENT, FEATURE, BUGFIX
  phase       String   @default("PLANNING") // PLANNING, IN_PROGRESS, DONE, CANCELLED
  status      String   @default("ACTIVE") // ACTIVE, PAUSED, COMPLETED, ARCHIVED
  
  // MVP and prioritization
  mvpPriority String   @default("MEDIUM") // CRITICAL, HIGH, MEDIUM, LOW, FUTURE
  coreValue   String?  // Core business value description
  sequence    Int      @default(0) // Order within project
  
  // Estimation and tracking
  estimatedStoryPoints Int     @default(0)
  actualStoryPoints    Int     @default(0)
  startDate            DateTime?
  dueDate              DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  completedAt DateTime?

  // Relations
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  stories     KanbanCard[] // Epic contains multiple stories/cards
  dependencies EpicDependency[] @relation("EpicDependencies")
  dependents   EpicDependency[] @relation("EpicDependents")

  @@map("epics")
}

model EpicDependency {
  id          String   @id @default(cuid())
  epicId      String   // Epic that depends on another
  dependsOnId String   // Epic that this epic depends on
  type        String   @default("BLOCKS") // BLOCKS, RELATES_TO, SIMILAR_TO
  description String?  // Why this dependency exists
  
  createdAt   DateTime @default(now())

  // Relations
  epic        Epic     @relation("EpicDependencies", fields: [epicId], references: [id], onDelete: Cascade)
  dependsOn   Epic     @relation("EpicDependents", fields: [dependsOnId], references: [id], onDelete: Cascade)

  @@unique([epicId, dependsOnId])
  @@map("epic_dependencies")
}

model MVPPhase {
  id          String   @id @default(cuid())
  projectId   String
  name        String   // "Core MVP", "Enhanced MVP v1"
  description String?  // Phase description
  sequence    Int      @default(0) // Phase order
  status      String   @default("PLANNING") // PLANNING, IN_PROGRESS, COMPLETED, CANCELLED
  
  // Phase targets
  targetDate  DateTime?
  coreFeatures String  // JSON array of Epic IDs that are core to this phase
  
  // Progress tracking
  plannedStoryPoints Int @default(0)
  completedStoryPoints Int @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  releasedAt  DateTime?

  // Relations
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("mvp_phases")
}

// AI-Native TDD Development Models
model Cycle {
  id          String   @id @default(cuid())
  projectId   String
  storyId     String?  // Optional: which story/card this cycle belongs to
  title       String   // "Add user authentication"
  description String?  // Optional detailed description
  phase       String   @default("RED") // RED, GREEN, REFACTOR, REVIEW
  status      String   @default("ACTIVE") // ACTIVE, PAUSED, COMPLETED, FAILED
  sequence    Int      @default(0) // Order within story
  
  // Feature definition
  acceptanceCriteria String // JSON array of criteria
  constraints        String? // JSON array of technical constraints
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  completedAt DateTime?

  // Relations
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  story       KanbanCard? @relation(fields: [storyId], references: [id], onDelete: SetNull)
  tests       Test[]
  queries     Query[]
  artifacts   Artifact[]

  @@map("cycles")
}

model Test {
  id          String   @id @default(cuid())
  cycleId     String
  name        String   // "should validate user credentials"
  description String?  // Optional test description
  code        String   // Actual test code
  filePath    String?  // Where the test file should be located
  status      String   @default("FAILING") // FAILING, PASSING, SKIPPED, BROKEN
  
  // Test execution details
  lastRun     DateTime?
  duration    Int?     // Execution time in milliseconds
  errorOutput String?  // Error message if test failed
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  cycle       Cycle    @relation(fields: [cycleId], references: [id], onDelete: Cascade)

  @@map("tests")
}

model Query {
  id          String   @id @default(cuid())
  projectId   String
  cycleId     String?  // Optional - queries can be cycle-specific or general
  
  // Query details
  type        String   // ARCHITECTURE, BUSINESS_LOGIC, UI_UX, INTEGRATION, CLARIFICATION
  title       String   // Short question summary
  question    String   // Detailed question
  context     String   // JSON object with code context, options, etc.
  
  urgency     String   @default("ADVISORY") // BLOCKING, ADVISORY
  priority    String   @default("MEDIUM")   // LOW, MEDIUM, HIGH
  status      String   @default("PENDING")  // PENDING, ANSWERED, DISMISSED, EXPIRED
  
  // Response
  answer      String?  // User's response
  answeredAt  DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  cycle       Cycle?   @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  comments    QueryComment[]

  @@map("queries")
}

model QueryComment {
  id          String   @id @default(cuid())
  queryId     String
  content     String
  author      String   @default("user") // user, ai, system
  
  createdAt   DateTime @default(now())

  // Relations
  query       Query    @relation(fields: [queryId], references: [id], onDelete: Cascade)

  @@map("query_comments")
}

model Artifact {
  id          String   @id @default(cuid())
  cycleId     String
  
  // Artifact details
  type        String   // CODE, TEST, DOCS, SCHEMA, CONFIG
  name        String   // File name or artifact name
  path        String   // File path relative to project root
  content     String   // Generated content
  
  // Generation details
  purpose     String?  // Why this artifact was created
  phase       String   // Which TDD phase created this (RED, GREEN, REFACTOR)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  cycle       Cycle    @relation(fields: [cycleId], references: [id], onDelete: Cascade)

  @@map("artifacts")
}

// Note: SQLite doesn't support enums, so we use strings with default values
// Valid values:
// ProjectStatus: "ACTIVE", "PAUSED", "COMPLETED", "ARCHIVED"
// CardStatus: "BACKLOG", "TODO", "IN_PROGRESS", "REVIEW", "DONE"
// TaskStatus: "PENDING", "RUNNING", "COMPLETED", "FAILED", "PAUSED"
// MilestoneStatus: "PLANNED", "IN_PROGRESS", "COMPLETED"
// EpicType: "MVP", "ENHANCEMENT", "FEATURE", "BUGFIX"
// EpicPhase: "PLANNING", "IN_PROGRESS", "DONE", "CANCELLED"
// EpicStatus: "ACTIVE", "PAUSED", "COMPLETED", "ARCHIVED"
// MVPPriority: "CRITICAL", "HIGH", "MEDIUM", "LOW", "FUTURE"
// MVPPhaseStatus: "PLANNING", "IN_PROGRESS", "COMPLETED", "CANCELLED"
// StoryPriority: "LOW", "MEDIUM", "HIGH"
// DependencyType: "BLOCKS", "RELATES_TO", "SIMILAR_TO"
// CyclePhase: "RED", "GREEN", "REFACTOR", "REVIEW"
// CycleStatus: "ACTIVE", "PAUSED", "COMPLETED", "FAILED"
// TestStatus: "FAILING", "PASSING", "SKIPPED", "BROKEN"
// QueryType: "ARCHITECTURE", "BUSINESS_LOGIC", "UI_UX", "INTEGRATION", "CLARIFICATION"
// QueryUrgency: "BLOCKING", "ADVISORY"
// QueryStatus: "PENDING", "ANSWERED", "DISMISSED", "EXPIRED"
// ArtifactType: "CODE", "TEST", "DOCS", "SCHEMA", "CONFIG"
// LogLevel: "info", "warn", "error", "debug"

model ProjectLog {
  id        String   @id @default(cuid())
  projectId String
  
  // Log details
  level     String   // "info", "warn", "error", "debug"
  message   String   // Log message
  source    String   // Source of the log (e.g., "claude-code", "agent-executor", "api")
  metadata  String?  // JSON string for additional data
  
  createdAt DateTime @default(now())

  // Relations
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId, createdAt])
  @@index([projectId, level])
  @@index([projectId, source])
  @@map("project_logs")
}